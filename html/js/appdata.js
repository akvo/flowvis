// Generated by CoffeeScript 1.7.1
var App;

App = Ember.Application.create();

App.ApplicationAdapter = DS.FixtureAdapter.extend();

App.Flowdata = DS.Model.extend({
  surveyDate: DS.attr('date'),
  submitter: DS.attr('string'),
  settlement: DS.attr('string'),
  wPtype: DS.attr('string'),
  hPtype: DS.attr('string'),
  status: DS.attr('string'),
  mainProblem: DS.attr('string'),
  constructionDate: DS.attr('date'),
  whoInstalled: DS.attr('string'),
  usedForDrinking: DS.attr('boolean'),
  quality: DS.attr('string'),
  quantity: DS.attr('string'),
  waterCommittee: DS.attr('boolean'),
  collectMoney: DS.attr('string'),
  photo: DS.attr('string'),
  latitude: DS.attr('number'),
  longitude: DS.attr('number')
});

App.IndexView = EmberLeaflet.MapView.extend({
  center: L.latLng(6.22, -9.25),
  zoom: 9,
  didInsertElement: function() {
    var ctrl, feature, fields, flowdata, g, getBounds, map, projectPoint, svg, update;
    getBounds = function(data) {
      var brx, bry, item, pt, tlx, tly, _i, _len;
      tlx = tly = Infinity;
      brx = bry = -Infinity;
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        item = data[_i];
        pt = map.latLngToLayerPoint(item.LatLng);
        if (pt.x > brx) {
          brx = pt.x;
        }
        if (pt.y > bry) {
          bry = pt.y;
        }
        if (pt.x < tlx) {
          tlx = pt.x;
        }
        if (pt.y < tly) {
          tly = pt.y;
        }
      }
      return [[tlx, tly], [brx, bry]];
    };
    update = function() {
      var bounds, br, tl;
      if (typeof feature !== "undefined" && feature !== null) {
        feature.attr("transform", function(d) {
          return "translate(" + (map.latLngToLayerPoint(d.LatLng).x) + ", " + (map.latLngToLayerPoint(d.LatLng).y) + ")";
        });
      }
      bounds = getBounds(flowdata);
      tl = bounds[0];
      br = bounds[1];
      svg.attr("width", br[0] - tl[0] + 40).attr("height", br[1] - tl[1] + 40).style("left", "" + (tl[0] - 10) + "px").style("top", "" + (tl[1] - 10) + "px");
      return g.attr("transform", "translate(" + (-tl[0] + 10) + "," + (-tl[1] + 10) + ")");
    };
    projectPoint = function(x, y) {
      var pt;
      pt = map.latLngToLayerPoint(new L.LatLng(y, x));
      return this.stream.point(pt.x, pt.y);
    };
    feature = null;
    this._super();
    map = this._layer;
    svg = d3.select(map.getPanes().overlayPane).append("svg");
    g = svg.append("g").attr("class", "leaflet-zoom-hide");
    ctrl = this.get('controller');
    flowdata = [];
    fields = [];
    Ember.get(App.Flowdata, 'fields').forEach(function(field) {
      return fields.push(field);
    });
    return ctrl.store.find('flowdata').then(function(data) {
      data.forEach(function(item) {
        var d, f, _i, _len;
        d = {};
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
          f = fields[_i];
          d[f] = item.get(f);
        }
        d.LatLng = new L.LatLng(item.get('latitude'), item.get('longitude'));
        return flowdata.push(d);
      });
      feature = g.selectAll("circle").data(flowdata).enter().append("circle").style("stroke", "black").style("opacity", 0.6).style("fill", function(d) {
        if (d.quality.istartswith("soft")) {
          return "green";
        }
        return "red";
      }).attr("r", 5).attr("transform", function(d) {
        var pt;
        pt = map.latLngToLayerPoint(d.LatLng);
        return "translate(" + pt.x + "," + pt.y + ")";
      });
      map.on("viewreset", update);
      return update();
    });
  }
});

window.App = App;
